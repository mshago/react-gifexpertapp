{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","value","setValue","onSubmit","e","preventDefault","trim","length","type","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","time","className","src","alt","GifGrid","loading","state","setState","useEffect","then","x","useFetchGifs","index","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"oMAoCeA,EAjCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEXC,mBAAS,IAFE,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAiBrC,OACI,sBACIC,SAfa,SAACC,GAClBA,EAAEC,iBAEEJ,EAAMK,OAAOC,OAAS,IACtBR,EAAYE,GACZC,EAAS,MASb,SAEI,uBACIM,KAAK,OACLP,MAAOA,EACPQ,SAVS,SAACL,GAClBF,EAASE,EAAEM,OAAOT,a,8BCjBbU,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACTC,EADS,iDACuCC,UAAUH,GADjD,+DAEII,MAAMF,GAFV,cAETG,EAFS,gBAGQA,EAAKC,OAHb,uBAGPC,EAHO,EAGPA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT3B,kBAaRM,GAbQ,4CAAH,sDCEPO,EAAc,SAAC,GAA+B,EAA7BJ,GAA8B,IAA1BC,EAAyB,EAAzBA,MAAOV,EAAkB,EAAlBA,IAAkB,IAAbc,YAAa,MAAR,EAAQ,EAEvD,OACI,sBAAKC,UAAW,yDAAyDD,EAAK,IAA9E,UACG,qBAAKE,IAAMhB,EAAMiB,IAAMP,IACvB,4BAAKA,QCHHQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdZ,mBAAS,CAC/BmB,KAAK,GACLc,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WAENzB,EAAQC,GACHyB,MAAK,SAAAC,GAAC,OAAIH,EAAS,CAChBhB,KAAMmB,EACNL,SAAS,SAGnB,CAACrB,IAEIsB,EDd0BK,CAAa3B,GAAjCa,EAFwB,EAE7BN,KAAac,EAFgB,EAEhBA,QAErB,OACI,qCACI,6BAAKrB,IAEHqB,GAAW,wCAEb,qBAAKJ,UAAU,YAAf,SAEQJ,EAAOJ,KAAK,SAAEC,EAAKkB,GAAP,OACR,cAAC,EAAD,2BAESlB,GAFT,IAGIM,KAAMY,IAFDlB,EAAIC,aEGtBkB,EAjBM,WAAO,IAAD,EAESzC,mBAAS,UAFlB,mBAEhBY,EAFgB,KAENb,EAFM,KAIvB,OACI,qCACE,8CACA,cAAC,EAAD,CACEA,YAAaA,IACf,uBACE,cAAC,EAAD,CACIa,SAAUA,QCV1B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f6d6b54b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategory }) => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( value.trim().length > 2 ){\r\n            setCategory(value)\r\n            setValue('')\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <form \r\n            onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={value}\r\n                onChange={handleChange} \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async ( category ) => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=15&api_key=oWM8mhvKH8LQlR6UoviXf9iD8SLCyduG`;\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url, time=0 }) => {\r\n\r\n    return (\r\n        <div className={'card animate__animated animate__fadeIn animate__delay-'+time+'s'}>\r\n           <img src={ url } alt={ title } />\r\n           <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React /*, { useState, useEffect }*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && <p>Loading</p>}\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map( ( img, index ) => (\r\n                        <GifGridItem \r\n                            key={img.id}    \r\n                            { ...img }\r\n                            time={index}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true,\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(x => setState({\r\n                data: x,\r\n                loading: false\r\n            }))\r\n\r\n    },[category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [category, setCategory] = useState('Naruto')\r\n\r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2>\r\n          <AddCategory \r\n            setCategory={setCategory} />\r\n          <br/>\r\n            <GifGrid\r\n                category={category} \r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}